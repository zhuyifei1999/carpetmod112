--- ../src-base/minecraft/net/minecraft/server/management/PlayerChunkMap.java
+++ ../src-work/minecraft/net/minecraft/server/management/PlayerChunkMap.java
@@ -1,8 +1,10 @@
 package net.minecraft.server.management;
 
+import carpet.CarpetSettings;
 import com.google.common.base.Predicate;
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.ComparisonChain;
+import com.google.common.collect.Iterators;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
@@ -215,9 +217,17 @@
 
             if (!worldprovider.func_76567_e())
             {
+                if(carpet.carpetclient.CarpetClientChunkLogger.logger.enabled)
+                    carpet.carpetclient.CarpetClientChunkLogger.setReason("Dimensional unloading due to no players");
                 this.field_72701_a.func_72863_F().func_73240_a();
+                carpet.carpetclient.CarpetClientChunkLogger.resetReason();
             }
         }
+
+        // Sends updates to all subscribed players that want to get indexing of chunks Carpet-XCOM
+        if(carpet.carpetclient.CarpetClientRandomtickingIndexing.sendUpdates(field_72701_a)) {
+            carpet.carpetclient.CarpetClientRandomtickingIndexing.sendRandomtickingChunkOrder(field_72701_a, this);
+        }
     }
 
     public boolean func_152621_a(int p_152621_1_, int p_152621_2_)
@@ -271,8 +281,16 @@
 
     public void func_72683_a(EntityPlayerMP p_72683_1_)
     {
-        int i = (int)p_72683_1_.field_70165_t >> 4;
-        int j = (int)p_72683_1_.field_70161_v >> 4;
+        int i;
+        int j;
+        // Fix the player chunk map trunkation in negative coords causing offsets in chunk loading CARPET-XCOM
+        if(!CarpetSettings.playerChunkLoadingFix) {
+            i = (int)p_72683_1_.field_70165_t >> 4;
+            j = (int)p_72683_1_.field_70161_v >> 4;
+        } else {
+            i = MathHelper.func_76128_c(p_72683_1_.field_70165_t) >> 4;
+            j = MathHelper.func_76128_c(p_72683_1_.field_70161_v) >> 4;
+        }
         p_72683_1_.field_71131_d = p_72683_1_.field_70165_t;
         p_72683_1_.field_71132_e = p_72683_1_.field_70161_v;
 
@@ -280,7 +298,14 @@
         {
             for (int l = j - this.field_72698_e; l <= j + this.field_72698_e; ++l)
             {
-                this.func_187302_c(k, l).func_187276_a(p_72683_1_);
+                PlayerChunkMapEntry playerchunkmapentry = this.func_187302_c(k, l);
+                playerchunkmapentry.func_187276_a(p_72683_1_);
+
+                boolean rendering = isPlayerRendering(p_72683_1_, k, l);
+                if (rendering)
+                {
+                    playerchunkmapentry.addRenderingPlayer(p_72683_1_);
+                }
             }
         }
 
@@ -290,8 +315,16 @@
 
     public void func_72695_c(EntityPlayerMP p_72695_1_)
     {
-        int i = (int)p_72695_1_.field_71131_d >> 4;
-        int j = (int)p_72695_1_.field_71132_e >> 4;
+        int i;
+        int j;
+        // Fix the player chunk map trunkation in negative coords causing offsets in chunk loading CARPET-XCOM
+        if(!CarpetSettings.playerChunkLoadingFix) {
+            i = (int)p_72695_1_.field_71131_d >> 4;
+            j = (int)p_72695_1_.field_71132_e >> 4;
+        } else {
+            i = MathHelper.func_76128_c(p_72695_1_.field_71131_d) >> 4;
+            j = MathHelper.func_76128_c(p_72695_1_.field_71132_e) >> 4;
+        }
 
         for (int k = i - this.field_72698_e; k <= i + this.field_72698_e; ++k)
         {
@@ -327,38 +360,57 @@
 
     public void func_72685_d(EntityPlayerMP p_72685_1_)
     {
-        int i = (int)p_72685_1_.field_70165_t >> 4;
-        int j = (int)p_72685_1_.field_70161_v >> 4;
+        int i;
+        int j;
+        // Fix the player chunk map trunkation in negative coords causing offsets in chunk loading CARPET-XCOM
+        if(!CarpetSettings.playerChunkLoadingFix) {
+            i = (int)p_72685_1_.field_70165_t >> 4;
+            j = (int)p_72685_1_.field_70161_v >> 4;
+        } else {
+            i = MathHelper.func_76128_c(p_72685_1_.field_70165_t) >> 4;
+            j = MathHelper.func_76128_c(p_72685_1_.field_70161_v) >> 4;
+        }
         double d0 = p_72685_1_.field_71131_d - p_72685_1_.field_70165_t;
         double d1 = p_72685_1_.field_71132_e - p_72685_1_.field_70161_v;
         double d2 = d0 * d0 + d1 * d1;
 
         if (d2 >= 64.0D)
         {
-            int k = (int)p_72685_1_.field_71131_d >> 4;
-            int l = (int)p_72685_1_.field_71132_e >> 4;
-            int i1 = this.field_72698_e;
+            int k;
+            int l;
+            // Fix the player chunk map trunkation in negative coords causing offsets in chunk loading CARPET-XCOM
+            if(!CarpetSettings.playerChunkLoadingFix) {
+                k = (int)p_72685_1_.field_71131_d >> 4;
+                l = (int)p_72685_1_.field_71132_e >> 4;
+            } else {
+                k = MathHelper.func_76128_c(p_72685_1_.field_71131_d) >> 4;
+                l = MathHelper.func_76128_c(p_72685_1_.field_71132_e) >> 4;
+            }
             int j1 = i - k;
             int k1 = j - l;
 
             if (j1 != 0 || k1 != 0)
             {
-                for (int l1 = i - i1; l1 <= i + i1; ++l1)
                 {
-                    for (int i2 = j - i1; i2 <= j + i1; ++i2)
+                    int r = this.field_72698_e;
+
+                    for (int l1 = i - r; l1 <= i + r; ++l1)
                     {
-                        if (!this.func_72684_a(l1, i2, k, l, i1))
+                        for (int i2 = j - r; i2 <= j + r; ++i2)
                         {
-                            this.func_187302_c(l1, i2).func_187276_a(p_72685_1_);
-                        }
+                            if (!this.func_72684_a(l1, i2, k, l, r))
+                            {
+                                this.func_187302_c(l1, i2).func_187276_a(p_72685_1_);
+                            }
 
-                        if (!this.func_72684_a(l1 - j1, i2 - k1, i, j, i1))
-                        {
-                            PlayerChunkMapEntry playerchunkmapentry = this.func_187301_b(l1 - j1, i2 - k1);
-
-                            if (playerchunkmapentry != null)
+                            if (!this.func_72684_a(l1 - j1, i2 - k1, i, j, r))
                             {
-                                playerchunkmapentry.func_187277_b(p_72685_1_);
+                                PlayerChunkMapEntry playerchunkmapentry = this.func_187301_b(l1 - j1, i2 - k1);
+
+                                if (playerchunkmapentry != null)
+                                {
+                                    playerchunkmapentry.func_187277_b(p_72685_1_);
+                                }
                             }
                         }
                     }
@@ -367,6 +419,20 @@
                 p_72685_1_.field_71131_d = p_72685_1_.field_70165_t;
                 p_72685_1_.field_71132_e = p_72685_1_.field_70161_v;
                 this.func_187306_e();
+
+                {
+                    int r = this.getPlayerRenderDistance(p_72685_1_);
+                    for (int l1 = i - r; l1 <= i + r; ++l1)
+                    {
+                        for (int i2 = j - r; i2 <= j + r; ++i2)
+                        {
+                            if (!this.func_72684_a(l1, i2, k, l, r))
+                            {
+                                this.func_187302_c(l1, i2).addRenderingPlayer(p_72685_1_);
+                            }
+                        }
+                    }
+                }
             }
         }
     }
@@ -374,9 +440,28 @@
     public boolean func_72694_a(EntityPlayerMP p_72694_1_, int p_72694_2_, int p_72694_3_)
     {
         PlayerChunkMapEntry playerchunkmapentry = this.func_187301_b(p_72694_2_, p_72694_3_);
-        return playerchunkmapentry != null && playerchunkmapentry.func_187275_d(p_72694_1_) && playerchunkmapentry.func_187274_e();
+        return playerchunkmapentry != null && playerchunkmapentry.func_187275_d(p_72694_1_) && playerchunkmapentry.func_187274_e() && playerchunkmapentry.containsRenderingPlayer(p_72694_1_);
     }
 
+    // Number of chunks to send to client, <= compute distance
+    private int getPlayerRenderDistance(EntityPlayerMP player)
+    {
+        if ("zhuyifei1999_".equals(player.func_70005_c_()))
+        {
+            return 3;
+        }
+        return this.field_72698_e;
+    }
+
+    private boolean isPlayerRendering(EntityPlayerMP player, int x, int z)
+    {
+        int r = getPlayerRenderDistance(player);
+        int k = (int)player.field_71131_d >> 4;
+        int l = (int)player.field_71132_e >> 4;
+
+        return x >= k - r && x <= k + r && z >= l - r && z <= l + r;
+    }
+
     public void func_152622_a(int p_152622_1_)
     {
         p_152622_1_ = MathHelper.func_76125_a(p_152622_1_, 3, 32);
@@ -402,6 +487,12 @@
                             {
                                 playerchunkmapentry.func_187276_a(entityplayermp);
                             }
+
+                            boolean rendering = isPlayerRendering(entityplayermp, j1, k1);
+                            if (rendering && !playerchunkmapentry.containsRenderingPlayer(entityplayermp))
+                            {
+                                playerchunkmapentry.addRenderingPlayer(entityplayermp);
+                            }
                         }
                     }
                 }
@@ -460,7 +551,28 @@
 
         if (chunk != null)
         {
+            if(carpet.carpetclient.CarpetClientChunkLogger.logger.enabled)
+                carpet.carpetclient.CarpetClientChunkLogger.setReason("Player leaving chunk, queuing unload");
             this.func_72688_a().func_72863_F().func_189549_a(chunk);
+            carpet.carpetclient.CarpetClientChunkLogger.resetReason();
         }
     }
+
+    /*
+     * 0x Chunk Logger - Gets the coordinates of all chunks
+     */
+    public Iterator<ChunkPos> carpetGetAllChunkCoordinates(){
+    	return new AbstractIterator<ChunkPos>() {
+    		Iterator<PlayerChunkMapEntry> allChunks = Iterators.concat(field_111193_e.iterator(),field_187311_h.iterator());
+			@Override
+			protected ChunkPos computeNext() {
+				if(allChunks.hasNext()) {
+					return allChunks.next().func_187264_a();
+				}
+				else {
+					return (ChunkPos) this.endOfData();
+				}
+			}
+    	};
+    }
 }
